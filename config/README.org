#+TITLE:     Emacs em 30 Segundos
#+AUTHOR:    Guaracy Monteiro

#+LANGUAGE: pt_br
#+LaTeX_HEADER: \usepackage[brazil]{babel}
#+LaTeX_HEADER: \usepackage{framed, color}
#+LaTeX_HEADER: \definecolor{shadecolor}{rgb}{0.93,0.93,0.9}
#+STARTUP: showall

\pagebreak

------

*TL;DR*

Arquivo de configuração para ser utilizado em uma instalação nova do Emacs ou substituir uma antiga (excluir *.emacs* e *.emacs.d*). Automaticamente instala alguns pacotes definidos e configura o ambiente e os pacotes. Tudo bem explicadinho para ser alterado//melhorado facilmente. 

1. Grave o arquivo [[https://raw.githubusercontent.com/guaracy/emacs/master/config/.emacs][.emacs]], no seu diretório *home*. Se desejar, grave também o arquivo [[https://raw.githubusercontent.com/guaracy/emacs/master/config/.myemacs][.myemacs]] no seu diretório *home*. Abra o Emacs e espere a configuração terminar.
2. Baixe e leia a documentação no formato desejado: [[https://raw.githubusercontent.com/guaracy/emacs/master/config/docs/README.pdf][README.pdf]], [[https://raw.githubusercontent.com/guaracy/emacs/master/config/docs/README.epub][README.epub]], [[https://raw.githubusercontent.com/guaracy/emacs/master/config/docs/README.docx][README.doc]], [[https://raw.githubusercontent.com/guaracy/emacs/master/config/docs/README.odt][README.odt]].

------

\pagebreak

* Emacs em 30 segundos

A ideia base deste projeto é a possível dificuldade de instalação e configuração do Emacs por parte dos usuários. A instalação é simples mas, conforme o programa sai de /fábrica/, muitas pessoas encontram uma pequena dificuldade inicial e, como pensam: "- /Ah, é só mais um editor de textos. Vou continuar com o que eu já conheço/.", e perdem uma ferramenta das mais poderosas que poderiam usar. Apesar de ser possível efetuar algumas alterações pelo menu, muitas necessitam que o usuário edite um arquivo de configuração (*.emacs*). A instalação de novos pacotes, por exemplo, já foi uma tarefa bem mais complicada. 

** Alternativas

Existem algumas opções que possuem um Emacs configurado para o usuário final. É possível citar:

1. [[https://github.com/syl20bnr/spacemacs][Spacemacs]] : É uma ótima alternativa e bastante indicada para usuários do Vim. Existem pessoas que tentaram usar o Emacs mas voltaram para o Vim. Depois de instalar o Spacemacs, estão usando é achando ótimo. Basicamente é uma cópia do diretório *.emacs.d* com toda a configuração automática. O usuário precisará ler a documentação se desejar fazer alguma alteração na configuração.
2. [[https://github.com/myTerminal/super-emacs][super-emacs]] : Também é uma cópia do diretório *.emacs.d* porém com uma configuração mais simples que o Spacemacs. 
3. [[https://github.com/ergoemacs/ergoemacs-mode][Ergoemacs]] : Deve ser uma ótima configuração para o Windows. No Linux é difícil de testar pois muitos atalhos conflitam com o desktop (KDE, Gnome, etc).
4. [[https://github.com/guaracy/emacs/tree/master/config][Emacs30]] : Este que você está lendo. Baseia-se apenas em uma arquivo de configuração (*.emacs*) que deve ser gravado no diretório home do usuário. Ele irá baixar e configurar os diversos pacotes. Ao término, ele verifica se existe o arquivo (*.myemacs*). Se existir, continua a configuração por este arquivo. 

Vejo como principal desvantagem dos itens 1 e 2 a não habilitação do CUA-mode. Esconder o menu principal também pode ser estranho para alguns usuários iniciantes. O item e eu não testei. A habilitação do CUA-mode, entre outras coisas, permite combinações que a maioria dos usuários está acostumada como: /Ctrl+c/ /Ctrl+c/ para copiar, /Ctrl+c/ /Ctrl+v/ para colar e /Ctrl+z/ para desfazer. 

Inicialmente o Emacs possui uma tela assim:

#+CAPTION: Tela inicial do Emacs
#+NAME: fig:emacs1
[[./images/emacs1.jpg]]

Ou seja, uma barra de ferramentas de gosto duvidoso (depois de um breve período de uso você vai achar melhor os atalhos do que tirar a mão do teclado, pegar o mouse e clicar em um botão) e uma tela inicial com muita informação, um /C-x/ indicando que o usuário pressionou a sequencia /Ctrl+x/. Ficará assim:

#+CAPTION: Tela final do Emacs
#+NAME: fig:emacs2
[[./images/emacs2.jpg]]

Uma tela mais limpa (o esquema de cores dependerá do escolhido pelo usuário), uma linha de status mais agradável e, se pressionar /Ctrl+x/ uma relação das alternativas possíveis para complementar o comando. 

** Características do projeto

1. Habilitação do CUA-mode para que o usuário não precise aprender que /Alt+w/ é usada para copiar um texto, por exemplo.
2. Alterar a aparência do Emacs, utilizando um tema com fundo escuro. O usuário poderá optar por um fundo claro a qualquer momento
3. Deixar a barra de status com uma aparência mais agradável.
4. Alterar diversas opções para deixar o Emacs mais amigável(?).
5. Instalar alguns pacotes para facilitar o trabalho do usuário em diversas áreas, podendo inclusive gerar arquivos .docx (Microsoft Word), .odt (LibreOffice), .pdf, .epub (eBook) entre diversos outros de forma simples (pode necessitar da instalação de programas externos como por exemplo, para gerar .pdf é necessário instalar o *MiKTeX* no Windows ou o *texlive* no Linux).

** org-mode

Inicialmente estava previsto a instalação do pacote *markdown* para facilitar a criação e transformação de textos em uma linguagem de marcação simples para outros documentos mais complexos. Como o Emacs já vem com o org-mode e muitos usuários utilizam o Emacs basicamente pelo pacote, nada melhor do que utilizá-lo.

1. Utiliza uma linguagem de marcação relativamente simples.
2. É possível utilizar como arquivo de entrada e exportar para diversos formatos.
3. De brinde, o usuário ganha um poderoso organizador pessoal que permite até a sincronização dos dados com seu smartphone ou tablet.
4. Por último mas não menos importante, o GitHub aceita diretamente um arquivo README.org como o README.md.

** Instalação

Copiar o arquivo [[https://raw.githubusercontent.com/guaracy/emacs/master/config/.emacs][.emacs]] e [[https://raw.githubusercontent.com/guaracy/emacs/master/config/.myemacs][.myemacs]] para o diretório home (Linux : *~/* ou */home/usuário*; Windows: *c:\\Usuários\\usuário\\AppData\\Rooming\\*) do usuário (caso já exista uma arquivo *.emacs* e/ou *.myemacs*, faça um backup por garantia). Apague o diretório *.emacs.d* (também faça backup se for o caso). Depois é só executar o Emacs que os pacotes serão baixados e instalados. 

* Arquivo .emacs

** Configurações iniciais

** Pacotes

É onde tudo acontece. Achei que seria melhor explicar com mais detalhes tudo o que acontece durante a execução do arquivo para que o usuário possa efetuar alterações básicas para deixar o Emacs mais ao seu gosto. As linhas que iniciam com ponto e vírgula indicam que são comentários e não serão interpretadas. Para um entendimento melhor, seria interessante que o usuário aprendesse um pouco sobre a linguagem *emacs-lisp* (uma variação de lisp) de onde vem toda a flexibilidade do Emacs.

*** Alterações das opções iniciais

Deixei estas alterações no início pois, se for feita alguma alteração utilizando o menu *Options* e o usuário selecionar *Options/Save Options*, esta parte do arquivo *.emacs* será alterada. Ficando no início é mais fácil de visualizar e não causa tanta confusão.

#+begin_src emacs-lisp -n -r
(custom-set-variables
 '(cua-mode t nil (cua-base)) (ref:cua)
 '(custom-enabled-themes (quote (misterioso))) (ref:theme)
 '(indicate-empty-lines t) (ref:empty)
 '(show-paren-mode t) (ref:paren)
 '(tool-bar-mode nil)) (ref:tool)
#+end_src

Ativamos o CUA-mode [[(cua)]], inicializamos um tema (cores utilizadas para fundo, fontes e salientar diversas sintaxes no texto) diferente do original [[(theme)]], indicamos que linha vazias devem conter um símbolo no início para diferencia de linhas que possuam espaço [[(empty)]], dizemos que queremos uma visualização para abertura e fechamento de chaves, parêntesis e colchetes (muito útil para programação)[[(paren)]] e, finalmente, que não desejamos ver a barra de ferramentas (as teclas de atalho são mais eficientes e nada que dois níveis do menu não resolvam) [[(tool)]].

*** Inclusão e atualização de fonte de pacotes

#+BEGIN_SRC emacs-lisp -n
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/")
             t)
(package-initialize)
#+END_SRC

Adiciona o repositório MELPA que contém um maior número de pacotes e com uma atualização constante.

#+BEGIN_SRC emacs-lisp
(when (not package-archive-contents)
  (package-refresh-contents))
#+END_SRC

Atualiza o conteúdo das fontes de pacotes se não existe. Para você atualizar os pacotes, utilize o menu *Options/Manage Emacs Packages*. Na janela de gerenciamento de pacotes, pressione *U* para atualizar os pacotes (irá excluir o anterior e instalar a versão nova), *I* para instalar algum pacotes desejado (veja *.myemacs*), *D* para excluir algum pacote (atenção para o que você excluir) e, quando tudo estiver pronto, pressione *X* para executar as ações de inclusão e exclusão.

*** Seleção e instalação dos pacotes pelo Emacs30

#+BEGIN_SRC emacs-lisp
(defvar gbm-required-packages
  '(which-key
    hl-line+
    powerline
    hlinum
    hiwin
    ido-grid-mode
    ido-select-window
    imenu-anywhere
    smex
    pandoc-mode
    org-cua-dwim
    org-pandoc
    auto-complete
    smartparens
    goto-chg
    indent-guide
    theme-looper))
#+END_SRC

Não inclua nenhum pacote neste ponto. Utilize o arquivo *.myemacs* se deseja incluir outros pacotes. Para saber mais sobre cada pacote especificado, você pode ir no [[https://melpa.org/][MELPA]], digitar o nome do pacote e clicar no link da coluna /source/. Na grande maioria das vezes, você irá para uma página com informações do pacote. No gerenciador de pacotes do Emacs, *Options/Manage Emacs Packages*, também existem informações sobre a finalidade.

#+BEGIN_SRC emacs-lisp
(mapc (lambda (p)
        (package-install p))
      gbm-required-packages)
#+END_SRC

** Configurações da aparência e dos pacotes


*** Tamanho da janela

#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist
      '(
        (width . 130)
        (height . 40)
        ))
#+END_SRC

Especifica uma altura/largura maior do que os valores padrões. Em muitos casos, é melhor maximizar a janela para poder trabalhar com mais de um frame e uma boa visibilidade de cada um.

*** Which key

#+BEGIN_SRC emacs-lisp
(which-key-mode)
(which-key-setup-minibuffer)
(setq max-mini-window-height 10)
(setq which-key-idle-delay 0.5)
(set-face-attribute 
  'which-key-local-map-description-face nil
  :weight 'bold)
#+END_SRC

Quando o usuário utilizar um atalho como /Ctrl+c/ ou /Ctrl+h/, por exemplo, e não digitar o complemento dentro de 0.5 segundos, o minibuffer irá mostrar as possibilidades existentes para completar o comando. Foi configurado que o minibuffer terá 10 linhas de altura, o tempo de espera é de 0,5 segundos e as combinações válidas para o buffer onde o usuário está trabalhando estarão em negrito.

*** Numeração das linhas

#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC

Indica para numerar as linhas em todos os buffers. A qualquer momento o usuário poderá alterar pressionando /Alt+x linum-mode/. 

*** Realça linha do cursor

#+BEGIN_SRC emacs-lisp
(hl-line-mode t)
(toggle-hl-line-when-idle)
(set-face-attribute hl-line-face nil :background "Grey25")
(set-cursor-color "yellow")
#+END_SRC

Irá realçar a linha onde encontra-se o cursor apenas quando o usuário não estiver fazendo nada. Escolhi /Grey25/ como cor de fundo e /yellow/ para a cor do cursor. Para ver as cores, suas combinações bem como o nome, basta entrar com /Alt+x list-colors-display/

*** Realça numeração da linha do cursor

#+BEGIN_SRC emacs-lisp
(require 'hlinum)
(hlinum-activate)
#+END_SRC

O realce de linha não realça a numeração da linha. A função do /hlinum/ é para realçar o número da linha. Sempre será realçada, independente do programa estar em espera.

*** Realçar parêntesis

#+BEGIN_SRC emacs-lisp
(show-paren-mode)
#+END_SRC

Realça os respectivos pares de parêntesis, chaves ou colchetes. 

*** Esconde barra de rolamento

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

Esconde a barra de rolamento do frame. A barra de status já possui informações sobre inicio ou final de arquivo ou percentual que já foi rolado. Também possui um pequeno ícone mostrando a posição relativa (como uma mini barra de rolamento). Ganhamos mais um pouco de espaço na horizontal e menos um elemento para distrair.

*** Salva estado atual ao sair

#+BEGIN_SRC emacs-lisp
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name
  ".places" user-emacs-directory))
#+END_SRC

Salva a posição atual do cursor no arquivo. Na próxima vez que for aberto, será posicionado na posição que estava antes de encerra.

*** Desabilita buffer de mensagem inicial

#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice
    t)
#+END_SRC

Desabilita a tela de abertura que contém diversas informações desnecessárias.

*** Troca mensagem do buffer de rascunho

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message
    ";; Nada neste buffer será salvo. Use:\n;;
    Ctrl+x Ctrl+r / Ctrl+x Ctrl+f para ler um arquivo.\n")
#+END_SRC

Alterei a mensagem do buffer de rascunho. Nada do que for escrito nele será salvo automaticamente ao sair. Buffers contendo arquivos, se forem alterados e ainda não foram salvos ao encerrar o programa, será mostrada uma mensagem informando que os dados não foram salvos e se o usuário deseja sair, salvar ou cancelar.

*** Configura powerline

#+BEGIN_SRC emacs-lisp
(powerline-center-theme)
(setq powerline-default-separator
      'wave)
#+END_SRC

Confere uma apresentação melhor para a linha de status.

*** ido no modo grade

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode t)
(ido-grid-mode t)
(global-set-key (kbd "C-x o") 'ido-select-window)
(global-set-key (kbd "<f4>") 'ido-select-window)
#+END_SRC

IDO (InteractivelyDoThings) mostra as opções disponíveis no minibuffer facilitando a escolha pelo usuário. Se for informado o comando para abrir um arquivo (/Ctrl+x Ctrl+f/) por exemplo, será aberto um frame com a relação dos arquivos e diretórios para que seja feita a escolha. A última escolha sempre aparecerá em primeiro lugar. O usuário poderá usar as setas e enter para selecionar o arquivo ou poderá ir digitando o nome do arquivo ficando visíveis apenas os que coincidirem com o digitado. Se o diretório tiver diversos arquivos com o nome /temp/ e extensões diferentes (supondo-se que nenhum inicie com o caractere /t/), basta digitar /t/ e parte da extensão: /ttex/ selecionará todos os arquivos que possuam a extensão iniciando com /tex'.

*** Configura atalho *Ctrl+.* para imenu-anywhere

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-.") 'imenu-anywhere)
#+END_SRC

Mostra no minibuffer, via IDO, o que o programa acha que é interessante para que o usuário possa movimentar-se com mais rapidez no arquivo. Nome de funções e procedimentos no caso de programas, o que for considerado título em arquivos texto, etc.

*** Configura atalhos *Alt+x* e *Alt+X* para smex

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC

Se o usuário digitar /Alt+x/, será apresentado no minibuffer via IDO, uma seleção das possíveis complementações.

*** Configura o autocomplete

#+BEGIN_SRC emacs-lisp
(ac-config-default)
(ac-linum-workaround)
#+END_SRC

Apresenta um menu para completar automaticamente a digitação de funções e procedimentos em programas. Quando existente, apresenta uma janela de auxílio sobre a função//procedimento atual.

*** Indent guide

#+BEGIN_SRC emacs-lisp
(indent-guide-global-mode)
#+END_SRC

Mostra barras verticais para mostras a endentação em programas.

*** Configura theme-looper

#+BEGIN_SRC emacs-lisp
(theme-looper-set-customizations 'powerline-reset)
(global-set-key (kbd "C-\"") 'theme-looper-enable-next-theme)
#+END_SRC

Permite que o usuário passeie pelos temas especificado para verificar algum que lhe agrade mais. Para alterar definitivamente, uma das opções é ir no menu *Options/Customize Emacs/Custom Themes*.

*** Configura goto last change

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x .") 'goto-last-change)
(global-set-key (kbd "C-x ,") 'goto-last-change-reverse)
#+END_SRC

Permite que o usuário pule nas últimas alterações Pressionando a combinmação /Ctrl+,/ e /Ctrl+./. 

*** Ctrl+x Ctrl+r abre lista de arquivos recentes

#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode t)
(setq recentf-max-menu-items 25)
(defun recentf-ido-find-file ()
  "Find a recent file using Ido."
  (interactive)
  (let ((file (ido-completing-read "Choose recent file: "
    recentf-list nil t)))
    (when file
      (find-file file))))
(global-set-key (kbd "C-x C-r") 'recentf-ido-find-file)
#+END_SRC

Utilizando /Ctrl+x Ctrl+r/ permite que o usuário abra um minibuffer para escolher entre os últimos arquivo editados.

*** Carrega arquivo .myemacs

#+BEGIN_SRC emacs-lisp
(setq myconfig "~/.myemacs")
(if (file-exists-p myconfig)
    (load-file myconfig))
#+END_SRC

Informa para ler o conteúdo do arquivo *.myemacs* se ele existir. Deverá conter outras configurações desejadas pelo usuário. Não colocá-las no arquivo *.emacs*.


*** Define F3 para pesquisar e Shift+F3 para pesquisar próxima

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-f") 'isearch-forward)
(define-key isearch-mode-map (kbd "<f3>")
  'isearch-repeat-forward)
(define-key isearch-mode-map (kbd "S-<f3>")
  'isearch-repeat-backward)
#+END_SRC

Permite que o usuário digite /Ctrl+f/ para efetuar uma pesquisa ou invés de /Ctrl+s/ que é o padrão do Emacs. Pressionando /F3/ vai para a próxima ocorrência e /Shift+F3/ para a ocorrência anterior.


*** Configurar o org-mode

#+BEGIN_SRC emacs-lisp
(setq org-CUA-compatible t)
(setq org-support-shift-select t)
(setq org-src-fontify-natively t)
(setq org-startup-truncated nil)
(setq org-use-speed-commands t)
#+END_SRC

Apenas algumas configurações (existem muitas outras disponíveis). Uma melhor compatibilização do org-mode com o CUA-mode (shift setas para selecionar, por exemplo). Quebra de linhas no final da janela para não ser necessário rolar para ver a continuação. Colorizar fontes (utiliza htmlize). Speed commands para facilitar o trabalho com o org-mode. Estando no inicio de um título, por exemplo, é possível pressionar apenas *j* para saltar para os diverso títulos, *n* ou *p* para saltar para o tópico seguinte ou anterior e mais diversas facilidades.

* Arquivo .myemacs

É aconselhável que toda as alterações efetuadas pelo usuário estejam neste arquivo e não no *.emacs*. Facilita a vida do usuário em caso de atualização do arquivo *.emacs*. Abaixo um exemplo de conteúdo.

** Instalação de outros pacotes

#+BEGIN_SRC emacs-lisp
(package-refresh-contents)
(mapc (lambda (p)
	(package-install p))
      '(magit
        heroku-theme
	gruvbox-theme
        material-theme 
	spacemacs-theme
	subatomic-theme
	tangotango-theme
	paradox
	))
(load-theme 'spacemacs-dark t)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

Exemplo de instalação de outros pacotes que o usuário deseja. Aqui instalamos o /magit/ para facilitar o trabalho com o git e o /paradox/ que é um gerenciador de pacotes melhorado. O tema pare ser utilizado é o /spacemacs/.

** Funções úteis

Ou, pelo menos, que o usuário considere úteis para o seu trabalho. 

*** Rotacionar janelas

#+BEGIN_SRC emacs-lisp
(defun rotate-windows ()
  "Rotate your windows"
  (interactive)
  (other-window -1)
  (cond ((not (> (count-windows)1))
         (message "You can't rotate a single window!"))
        (t
         (setq i 1)
         (setq numWindows (count-windows))
         (while  (< i numWindows)
           (let* (
                  (w1 (elt (window-list) i))
                  (w2 (elt (window-list) (+ (% i numWindows) 1)))

                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))

                  (s1 (window-start w1))
                  (s2 (window-start w2))
                  )
             (set-window-buffer w1  b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (setq i (1+ i)))))))
(global-set-key (kbd "<f6>") 'rotate-windows)
#+END_SRC

Rotaciona os frames no sentido anti-horário. Mantém o foco no frame onde o usuário está trabalhando.

*** Renomeia buffer e arquivo

#+BEGIN_SRC emacs-lisp
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
(global-set-key (kbd "C-x r C-f") 'rename-current-buffer-file)
#+END_SRC

Altera o nome do buffer e do arquivo em disco. Como se o usuário gravasse o arquivo, renomeasse no disco e abrisse novamente.

*** insere linha em branco

#+BEGIN_SRC emacs-lisp
(defun open-line-below ()
  (interactive)
  (end-of-line)
  (newline)
  (indent-for-tab-command))

(defun open-line-above ()
  (interactive)
  (beginning-of-line)
  (newline)
  (forward-line -1)
  (indent-for-tab-command))
(global-set-key (kbd "C-x C-<down>") 'open-line-below)
(global-set-key (kbd "C-x C-<up>") 'open-line-above)
#+END_SRC

Insere uma linha em branco acima ou abaixo da linha onde está o cursor. O cursor pode estar em qualquer posição na linha.

* Conclusão

O presente trabalho encontra-se em fase de testes. Espero que seja útil para quem deseja iniciar com o Emacs ou para quem deseja incrementar e automatizar a sua instalação.

** makedoc

A documentação de [[./docs][./docs]] foi gerada pelo script *makedoc*. Antes da geração é necessário que o usuário gere um arquivo /.html/ pelo org-mode /Ctrl+c Ctrl+e h h/ (exporta em formato html para o disco). Utiliza o *pandoc* para gerar os formatos /docx epub odt/. Para a geração do pdf, primeiro é gerado um arquivo .tex, depois o /sed/ efetual algumas alterações que achei interessantes e, finalmente, gera o .pdf pelo .tex via /pdflatex/. Roda no Linux. Não sei os equivalentes para Windows.



#  LocalWords:  TITLE Emacs AUTHOR Guaracy TL emacs home myemacs TBD
#  LocalWords:  Spacemacs super-emacs Ergoemacs Windows desktop KDE
#  LocalWords:  Gnome LANGUAGE pt br LaTeX HEADER usepackage brazil
#  LocalWords:  framed STARTUP showall pagebreak CUA-mode Ctrl NAME
#  LocalWords:  CAPTION fig Alt docx Microsoft Word odt LibreOffice
#  LocalWords:  pdf epub eBook MiKTeX texlive org-mode markdown org
#  LocalWords:  smartphone tablet GitHub README md emacs-lisp lisp if
#  LocalWords:  Options Save begin src custom-set-variables cua-mode
#  LocalWords:  cua-base ref cua custom-enabled-themes theme empty it
#  LocalWords:  indicate-empty-lines show-paren-mode paren tool end
#  LocalWords:  tool-bar-mode package add-to-list package-archives is
#  LocalWords:  melpa package-initialize when not Manage Packages key
#  LocalWords:  package-archive-contents package-refresh-contents kbd
#  LocalWords:  defvar gbm-required-packages which-key hl-line hlinum
#  LocalWords:  powerline hiwin ido-grid-mode ido-select-window smex
#  LocalWords:  imenu-anywhere pandoc-mode org-cua-dwim org-pandoc up
#  LocalWords:  auto-complete smartparens goto-chg indent-guide link
#  LocalWords:  theme-looper source mapc package-install setq width
#  LocalWords:  initial-frame-alist characters height lines frame C-x
#  LocalWords:  Which which-key-mode which-key-setup-minibuffer bold
#  LocalWords:  max-mini-window-height which-key-idle-delay weight
#  LocalWords:  set-face-attribute minibuffer buffer buffers Grey tex
#  LocalWords:  which-key-local-map-description-face linum-mode black
#  LocalWords:  global-linum-mode hl-line-mode hl-line-face yellow
#  LocalWords:  toggle-hl-line-when-idle background set-cursor-color
#  LocalWords:  list-colors-display hlinum-activate scroll-bar-mode
#  LocalWords:  saveplace setq-default save-place save-place-file M-x
#  LocalWords:  expand-file-name places user-emacs-directory frames
#  LocalWords:  initial-buffer-choice initial-scratch-message wave
#  LocalWords:  hiwin-activate set-face-background hiwin-face temp
#  LocalWords:  powerline-center-theme powerline-default-separator
#  LocalWords:  ido-enable-flex-matching ido-everywhere ido-mode ttex
#  LocalWords:  global-set-key InteractivelyDoThings Indent adwaita
#  LocalWords:  smex-major-mode-commands ac-config-default dichromacy
#  LocalWords:  ac-linum-workaround indent-guide-global-mode wombat
#  LocalWords:  theme-looper-set-theme-set deeper-blue tango-dark let
#  LocalWords:  tsdh-dark wheatgrass theme-looper-set-customizations
#  LocalWords:  powerline-reset theme-looper-enable-next-theme Custom
#  LocalWords:  Themes last change goto-last-change combinmação defun
#  LocalWords:  goto-last-change-reverse recentf recentf-mode Find
#  LocalWords:  recentf-max-menu-items recentf-ido-find-file recent
#  LocalWords:  using interactive ido-completing-read Choose C-r C-f
#  LocalWords:  recentf-list find-file myconfig file-exists-p Shift
#  LocalWords:  load-file isearch-forward define-key isearch-mode-map
#  LocalWords:  isearch-repeat-forward isearch-repeat-backward Make
#  LocalWords:  windmove-default-keybindings windmove work add-hook
#  LocalWords:  org-shiftup-final-hook windmove-up windmove-left git
#  LocalWords:  org-shiftleft-final-hook org-shiftdown-final-hook You
#  LocalWords:  windmove-down org-shiftright-final-hook backup shift
#  LocalWords:  windmove-right org-CUA-compatible htmlize Speed magit
#  LocalWords:  org-support-shift-select org-src-fontify-natively elt
#  LocalWords:  org-startup-truncated org-use-speed-commands commands
#  LocalWords:  heroku-theme gruvbox-theme material-theme paradox and
#  LocalWords:  spacemacs-theme subatomic-theme tangotango-theme your
#  LocalWords:  load-theme spacemacs-dark magit-status spacemacs cond
#  LocalWords:  rotate-windows Rotate windows other-window message
#  LocalWords:  count-windows can't rotate window numWindows while
#  LocalWords:  window-list window-buffer window-start Renames name
#  LocalWords:  set-window-buffer set-window-start current visiting
#  LocalWords:  rename-current-buffer-file buffer-name filename New
#  LocalWords:  buffer-file-name new-name read-file-name get-buffer
#  LocalWords:  named already exists rename-file rename-buffer down
#  LocalWords:  set-visited-file-name set-buffer-modified-p renamed
#  LocalWords:  successfully file-name-nondirectory open-line-below
#  LocalWords:  end-of-line newline indent-for-tab-command makedoc
#  LocalWords:  open-line-above beginning-of-line forward-line script
#  LocalWords:  html pandoc sed efetual pdflatex
